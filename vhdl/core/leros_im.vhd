library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.leros_types.all;

-- instruction memory
-- write is ignored for now
-- the content should be generated by an assembler

entity leros_im is
	port  (
		clk : in std_logic;
		reset : in std_logic;
		din : in im_in_type;
		dout : out im_out_type
	);
end leros_im;

architecture rtl of leros_im is

	signal areg		: std_logic_vector(IM_BITS-1 downto 0);
	signal data		: std_logic_vector(15 downto 0);

begin

process(clk) begin

	if rising_edge(clk) then
		areg <= din.rdaddr;
	end if;

end process;

	dout.data <= data;
	
-- 		when "0000" =>
-- 			decode.op <= op_add;
-- 		when "0001" =>
-- 			decode.op <= op_sub;
-- 		when "0010" =>
-- 			decode.op <= op_load;
-- 		when "0011" =>
-- 		when "0100" =>
-- 			decode.op <= op_add;
-- 			decode.sel_imm <= '1';
-- 		when "0101" =>
-- 			decode.op <= op_sub;
-- 			decode.sel_imm <= '1';
-- 		when "0110" =>
-- 			decode.op <= op_load;
-- 			decode.sel_imm <= '1';
-- 		when others =>
-- 			decode.acc_en <= '0';


process(areg) begin

	case areg is

		when X"00" => data <= X"0811"; -- load imm
		when X"01" => data <= X"0c22"; -- add imm
		when X"02" => data <= X"0e03"; -- sub imm
		when X"03" => data <= X"0000";
		when X"04" => data <= X"0000";
		when others => data <= X"0000";
	end case;
end process;

end rtl;
